"""Initial migration

Revision ID: 0161ef85d15a
Revises: 
Create Date: 2025-08-09 12:12:59.824965

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0161ef85d15a'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configurations',
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('is_system', sa.Boolean(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_configurations_key'), 'configurations', ['key'], unique=True)
    op.create_table('performance_metrics',
    sa.Column('metric_name', sa.String(length=100), nullable=False),
    sa.Column('metric_value', sa.Float(), nullable=False),
    sa.Column('metric_unit', sa.String(length=20), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_metric_name_created', 'performance_metrics', ['metric_name', 'created_at'], unique=False)
    op.create_table('robot_states',
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('battery_level', sa.Float(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('cpu_usage', sa.Float(), nullable=True),
    sa.Column('memory_usage', sa.Float(), nullable=True),
    sa.Column('joint_positions', sa.JSON(), nullable=True),
    sa.Column('joint_velocities', sa.JSON(), nullable=True),
    sa.Column('joint_efforts', sa.JSON(), nullable=True),
    sa.Column('joint_temperatures', sa.JSON(), nullable=True),
    sa.Column('imu_data', sa.JSON(), nullable=True),
    sa.Column('force_torque_data', sa.JSON(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('uptime_seconds', sa.Integer(), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_data',
    sa.Column('sensor_type', sa.String(length=50), nullable=False),
    sa.Column('sensor_id', sa.String(length=50), nullable=False),
    sa.Column('data', sa.JSON(), nullable=False),
    sa.Column('quality', sa.Float(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sensor_created', 'sensor_data', ['created_at'], unique=False)
    op.create_index('idx_sensor_type_id_created', 'sensor_data', ['sensor_type', 'sensor_id', 'created_at'], unique=False)
    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=True),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=False),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('file_storage',
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('related_type', sa.String(length=50), nullable=True),
    sa.Column('related_id', sa.String(length=36), nullable=True),
    sa.Column('user_id', sa.String(length=36), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_file_hash', 'file_storage', ['file_hash'], unique=False)
    op.create_index('idx_file_related', 'file_storage', ['related_type', 'related_id'], unique=False)
    op.create_index('idx_file_user_created', 'file_storage', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_file_storage_file_hash'), 'file_storage', ['file_hash'], unique=False)
    op.create_table('system_logs',
    sa.Column('level', sa.String(length=10), nullable=False),
    sa.Column('logger_name', sa.String(length=100), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('module', sa.String(length=100), nullable=True),
    sa.Column('function', sa.String(length=100), nullable=True),
    sa.Column('line_number', sa.Integer(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('user_id', sa.String(length=36), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_system_log_level_created', 'system_logs', ['level', 'created_at'], unique=False)
    op.create_index('idx_system_log_logger_created', 'system_logs', ['logger_name', 'created_at'], unique=False)
    op.create_index('idx_system_log_user_created', 'system_logs', ['user_id', 'created_at'], unique=False)
    op.create_table('tasks',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('task_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('progress >= 0 AND progress <= 100', name='check_progress_range'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_status_priority', 'tasks', ['status', 'priority'], unique=False)
    op.create_index('idx_task_user_created', 'tasks', ['user_id', 'created_at'], unique=False)
    op.create_table('user_sessions',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_sessions_token'), 'user_sessions', ['token'], unique=True)
    op.create_table('task_logs',
    sa.Column('task_id', sa.String(length=36), nullable=False),
    sa.Column('level', sa.String(length=10), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_log_level', 'task_logs', ['level'], unique=False)
    op.create_index('idx_task_log_task_created', 'task_logs', ['task_id', 'created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_task_log_task_created', table_name='task_logs')
    op.drop_index('idx_task_log_level', table_name='task_logs')
    op.drop_table('task_logs')
    op.drop_index(op.f('ix_user_sessions_token'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index('idx_task_user_created', table_name='tasks')
    op.drop_index('idx_task_status_priority', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('idx_system_log_user_created', table_name='system_logs')
    op.drop_index('idx_system_log_logger_created', table_name='system_logs')
    op.drop_index('idx_system_log_level_created', table_name='system_logs')
    op.drop_table('system_logs')
    op.drop_index(op.f('ix_file_storage_file_hash'), table_name='file_storage')
    op.drop_index('idx_file_user_created', table_name='file_storage')
    op.drop_index('idx_file_related', table_name='file_storage')
    op.drop_index('idx_file_hash', table_name='file_storage')
    op.drop_table('file_storage')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index('idx_sensor_type_id_created', table_name='sensor_data')
    op.drop_index('idx_sensor_created', table_name='sensor_data')
    op.drop_table('sensor_data')
    op.drop_table('robot_states')
    op.drop_index('idx_metric_name_created', table_name='performance_metrics')
    op.drop_table('performance_metrics')
    op.drop_index(op.f('ix_configurations_key'), table_name='configurations')
    op.drop_table('configurations')
    # ### end Alembic commands ###
